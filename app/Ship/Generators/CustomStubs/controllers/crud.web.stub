<?php

namespace App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Controllers;

use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\Update{{model}}Request;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\Store{{model}}Request;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Create{{model}}ActionInterface;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Find{{model}}ByIdActionInterface;
use App\Containers\{{section-name}}\{{container-name}}\Actions\GetAll{{models}}ActionInterface;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Update{{model}}ActionInterface;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Delete{{model}}ActionInterface;
use App\Ship\Parents\Controllers\WebController;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;

class {{class-name}} extends WebController
{
    public function __construct(
        private GetAll{{models}}ActionInterface     $getAll{{models}}Action,
        private Create{{model}}ActionInterface      $create{{model}}Action,
        private Find{{model}}ByIdActionInterface    $find{{model}}ByIdAction,
        private Update{{model}}ActionInterface      $update{{model}}Action,
        private Delete{{model}}ActionInterface      $delete{{model}}Action
    )
    {
    }

    public function index(): Factory|View|Application
    {
        ${{entities}} = $this->getAll{{models}}Action->run();

        return view('constructor.base');
    }

    public function show(int $id): Factory|View|Application
    {
        ${{entity}} = $this->find{{model}}ByIdAction->run($id);

        return view('constructor.base');
    }

    public function create(): Factory|View|Application
    {
        return view('constructor.base');
    }

    public function store(Store{{model}}Request $request): JsonResponse
    {
        $this->create{{model}}Action->run($request->mapped());

        return response()->json()->setStatusCode(200);
    }

    public function edit(int $id): Factory|View|Application
    {
        ${{entity}} = $this->find{{model}}ByIdAction->run($id);

        return view('constructor.base');
    }

    public function update(int $id, Update{{model}}Request $request): JsonResponse
    {
        $data = $request->mapped()->setId($id);

        $this->update{{model}}Action->run($data);

        return response()->json()->setStatusCode(200);
    }

    public function destroy(int $id): JsonResponse
    {
        $this->delete{{model}}Action->run($id);

        return response()->json()->setStatusCode(200);
    }
}
